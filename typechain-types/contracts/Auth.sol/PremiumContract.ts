/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PremiumContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkValidBuyer"
      | "checkValidPremium"
      | "checkValidSeller"
      | "owner"
      | "premiums"
      | "purchasePremium"
      | "userTypes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkValidBuyer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkValidPremium",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkValidSeller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "premiums",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasePremium",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userTypes",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkValidBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkValidPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkValidSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "premiums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchasePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTypes", data: BytesLike): Result;
}

export interface PremiumContract extends BaseContract {
  connect(runner?: ContractRunner | null): PremiumContract;
  waitForDeployment(): Promise<this>;

  interface: PremiumContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkValidBuyer: TypedContractMethod<[], [boolean], "view">;

  checkValidPremium: TypedContractMethod<[], [boolean], "view">;

  checkValidSeller: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  premiums: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        name: string;
        amount: bigint;
        validity: bigint;
      }
    ],
    "view"
  >;

  purchasePremium: TypedContractMethod<
    [_premiumIndex: BigNumberish, _userIndex: BigNumberish],
    [void],
    "payable"
  >;

  userTypes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkValidBuyer"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkValidPremium"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkValidSeller"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "premiums"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        name: string;
        amount: bigint;
        validity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchasePremium"
  ): TypedContractMethod<
    [_premiumIndex: BigNumberish, _userIndex: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userTypes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  filters: {};
}
